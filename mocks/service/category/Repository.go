// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	category "github.com/hanifbg/cud-category-product/service/category"
	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// AddCategory provides a mock function with given fields: _a0
func (_m *Repository) AddCategory(_a0 category.Category) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(category.Category) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindCategoryById provides a mock function with given fields: id
func (_m *Repository) FindCategoryById(id int) (*category.Category, error) {
	ret := _m.Called(id)

	var r0 *category.Category
	if rf, ok := ret.Get(0).(func(int) *category.Category); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*category.Category)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCategory provides a mock function with given fields: _a0
func (_m *Repository) UpdateCategory(_a0 category.Category) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(category.Category) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
